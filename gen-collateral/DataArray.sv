// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module DataArray(
  input          clock,
                 io_read_valid,
  input  [7:0]   io_read_bits_way_en,
  input  [10:0]  io_read_bits_addr,
  input          io_write_valid,
  input  [7:0]   io_write_bits_way_en,
  input  [10:0]  io_write_bits_addr,
  input  [1:0]   io_write_bits_wmask,
  input  [127:0] io_write_bits_data,
  output [127:0] io_resp_0,
                 io_resp_1,
                 io_resp_2,
                 io_resp_3,
                 io_resp_4,
                 io_resp_5,
                 io_resp_6,
                 io_resp_7
);

  wire [63:0]  data_7_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_6_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_5_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_4_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_3_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_2_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_1_1;	// @[NBDcache.scala:662:63]
  wire [63:0]  data_1;	// @[NBDcache.scala:662:63]
  wire [127:0] _array_6_1_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_6_0_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_4_1_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_4_0_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_2_1_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_2_0_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_0_1_R0_data;	// @[DescribedSRAM.scala:17:26]
  wire [127:0] _array_0_0_R0_data;	// @[DescribedSRAM.scala:17:26]
  reg  [10:0]  r_raddr;	// @[Reg.scala:19:16]
  assign data_1 = io_write_bits_data[63:0];	// @[NBDcache.scala:662:63]
  assign data_1_1 = io_write_bits_data[127:64];	// @[NBDcache.scala:662:63]
  reg  [10:0]  r_raddr_1;	// @[Reg.scala:19:16]
  assign data_2_1 = io_write_bits_data[63:0];	// @[NBDcache.scala:662:63]
  assign data_3_1 = io_write_bits_data[127:64];	// @[NBDcache.scala:662:63]
  reg  [10:0]  r_raddr_2;	// @[Reg.scala:19:16]
  assign data_4_1 = io_write_bits_data[63:0];	// @[NBDcache.scala:662:63]
  assign data_5_1 = io_write_bits_data[127:64];	// @[NBDcache.scala:662:63]
  reg  [10:0]  r_raddr_3;	// @[Reg.scala:19:16]
  assign data_6_1 = io_write_bits_data[63:0];	// @[NBDcache.scala:662:63]
  assign data_7_1 = io_write_bits_data[127:64];	// @[NBDcache.scala:662:63]
  always @(posedge clock) begin
    if (io_read_valid) begin
      r_raddr <= io_read_bits_addr;	// @[Reg.scala:19:16]
      r_raddr_1 <= io_read_bits_addr;	// @[Reg.scala:19:16]
      r_raddr_2 <= io_read_bits_addr;	// @[Reg.scala:19:16]
      r_raddr_3 <= io_read_bits_addr;	// @[Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        r_raddr = _RANDOM_0[10:0];	// @[Reg.scala:19:16]
        r_raddr_1 = _RANDOM_0[21:11];	// @[Reg.scala:19:16]
        r_raddr_2 = {_RANDOM_0[31:22], _RANDOM_1[0]};	// @[Reg.scala:19:16]
        r_raddr_3 = _RANDOM_1[11:1];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  array_0_0_0 array_0_0 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[1:0])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[1:0])) & io_write_valid & io_write_bits_wmask[0]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[1:0]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_0_0_R0_data)
  );
  array_0_1 array_0_1 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[1:0])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[1:0])) & io_write_valid & io_write_bits_wmask[1]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_1_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[1:0]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_0_1_R0_data)
  );
  array_2_0_0 array_2_0 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[3:2])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[3:2])) & io_write_valid & io_write_bits_wmask[0]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_2_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[3:2]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_2_0_R0_data)
  );
  array_2_1 array_2_1 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[3:2])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[3:2])) & io_write_valid & io_write_bits_wmask[1]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_3_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[3:2]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_2_1_R0_data)
  );
  array_4_0_0 array_4_0 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[5:4])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[5:4])) & io_write_valid & io_write_bits_wmask[0]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_4_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[5:4]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_4_0_R0_data)
  );
  array_4_1 array_4_1 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[5:4])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[5:4])) & io_write_valid & io_write_bits_wmask[1]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_5_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[5:4]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_4_1_R0_data)
  );
  array_6_0_0 array_6_0 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[7:6])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[7:6])) & io_write_valid & io_write_bits_wmask[0]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_6_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[7:6]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_6_0_R0_data)
  );
  array_6_1 array_6_1 (	// @[DescribedSRAM.scala:17:26]
    .R0_addr (io_read_bits_addr[10:4]),	// @[NBDcache.scala:646:33]
    .R0_en   ((|(io_read_bits_way_en[7:6])) & io_read_valid),	// @[NBDcache.scala:651:40, :665:{46,50}]
    .R0_clk  (clock),
    .W0_addr (io_write_bits_addr[10:4]),	// @[NBDcache.scala:645:34]
    .W0_en   ((|(io_write_bits_way_en[7:6])) & io_write_valid & io_write_bits_wmask[1]),	// @[NBDcache.scala:650:41, :661:{23,45,67}]
    .W0_clk  (clock),
    .W0_data ({2{data_7_1}}),	// @[DescribedSRAM.scala:17:26, NBDcache.scala:662:63]
    .W0_mask (io_write_bits_way_en[7:6]),	// @[DescribedSRAM.scala:17:26]
    .R0_data (_array_6_1_R0_data)
  );
  assign io_resp_0 = {_array_0_1_R0_data[63:0], r_raddr[3] ? _array_0_1_R0_data[63:0] : _array_0_0_R0_data[63:0]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_1 = {_array_0_1_R0_data[127:64], r_raddr[3] ? _array_0_1_R0_data[127:64] : _array_0_0_R0_data[127:64]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_2 = {_array_2_1_R0_data[63:0], r_raddr_1[3] ? _array_2_1_R0_data[63:0] : _array_2_0_R0_data[63:0]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_3 = {_array_2_1_R0_data[127:64], r_raddr_1[3] ? _array_2_1_R0_data[127:64] : _array_2_0_R0_data[127:64]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_4 = {_array_4_1_R0_data[63:0], r_raddr_2[3] ? _array_4_1_R0_data[63:0] : _array_4_0_R0_data[63:0]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_5 = {_array_4_1_R0_data[127:64], r_raddr_2[3] ? _array_4_1_R0_data[127:64] : _array_4_0_R0_data[127:64]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_6 = {_array_6_1_R0_data[63:0], r_raddr_3[3] ? _array_6_1_R0_data[63:0] : _array_6_0_R0_data[63:0]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
  assign io_resp_7 = {_array_6_1_R0_data[127:64], r_raddr_3[3] ? _array_6_1_R0_data[127:64] : _array_6_0_R0_data[127:64]};	// @[DescribedSRAM.scala:17:26, NBDcache.scala:668:35, :671:{23,33}, :672:35, Reg.scala:19:16]
endmodule

